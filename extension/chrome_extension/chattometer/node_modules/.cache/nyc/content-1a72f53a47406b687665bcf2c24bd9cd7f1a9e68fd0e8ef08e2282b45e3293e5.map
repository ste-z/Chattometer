{"version":3,"names":["_lite","require","_o200k_base","_interopRequireDefault","e","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","_regeneratorRuntime","t","r","Object","n","hasOwnProperty","defineProperty","value","i","a","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","badge","BADGE_ID","observer","initializationTimer","ensureBadgeExists","existingBadge","document","getElementById","bottomBox","querySelector","createElement","id","insertAdjacentElement","classList","add","style","backgroundColor","backdropFilter","webkitBackdropFilter","padding","marginTop","marginBottom","console","log","findAndLogResponses","_findAndLogResponses","_callee","responses","modelElement","modelName","enc","textArray","combinedText","lastResponse","nTokensCombinedText","nTokensLastResponse","urlObj","chatKey","_callee$","_context","error","querySelectorAll","textContent","trim","Tiktoken","o200k_base","Array","from","map","element","join","encode","concat","URL","window","location","href","origin","pathname","chrome","storage","local","get","result","tokensMapStored","processedTokens","impactMap","lastImpactDataMap","reqMap","lastRequestMap","lastData","lastReq","url","_unused2","tokens","set","lastProcessedTokens","prevUrl","prevKey","updateBadge","_unused3","requestTimestamp","Date","now","runtime","sendMessage","action","timestamp","response","JSON","stringify","currentBadge","lastError","message","success","impactData","data","errorMsg","startsWith","_impactData$impacts","_impactData$impacts$e","_impactData$impacts2","_impactData$impacts2$","_impactData$impacts3","_impactData$impacts3$","_impactData$impacts4","_impactData$impacts4$","impacts","energy_kWh","min","undefined","max","gwp_kgCO2eq","avgEnergy","avgGhg","badgeText","toFixed","innerHTML","mutationCallback","mutationsList","obs","setTimeout","currentBottomBox","responsesExist","disconnect","setupObservers","MutationObserver","observedSomething","specificResponseContainer","observe","childList","subtree","warn","genericResponseContainer","body","modelSwitcherButton","characterData","initializeChattometer","urlObjInit","initChatKey","initResult","impactMapInit","reqMapInit","lastDataInit","lastReqInit","prevInit","_unused","scheduleInitialization","delay","clearTimeout","addEventListener","originalPushState","history","pushState","dispatchEvent","Event","originalReplaceState","replaceState","readyState","onMessage","addListener","request","sender","sendResponse"],"sourceRoot":"/Users/stevenzhou/Desktop/StevenZhou/Undergraduate/INFO4260/Chattometer/extension/chrome_extension/chattometer/src/scripts/","sources":["content.js"],"sourcesContent":["import { Tiktoken } from \"js-tiktoken/lite\";\nimport o200k_base from \"js-tiktoken/ranks/o200k_base\";\n\nlet badge = null; // Declare badge variable outside\nconst BADGE_ID = \"chattometer-impact-badge\"; // Unique ID for the badge\nlet observer = null; // Keep observer instance accessible\nlet initializationTimer = null; // Timer for debouncing initialization\n\n// --- Function to find or create the badge ---\nfunction ensureBadgeExists() {\n    // Check if the badge already exists in the current DOM\n    let existingBadge = document.getElementById(BADGE_ID);\n    if (existingBadge) {\n        badge = existingBadge; // Update global reference\n        return true; // Badge exists\n    }\n\n    // Badge doesn't exist, try to create it\n    const bottomBox = document.querySelector(\"div#thread-bottom-container\"); \n    // TODO: Add selectors for other platforms (Claude, etc.)\n    if (bottomBox) {\n        badge = document.createElement(\"div\");\n        badge.id = BADGE_ID; // Assign the unique ID\n        bottomBox.insertAdjacentElement(\"beforebegin\", badge); // Insert before the bottom box\n        badge.classList.add(\"text-token-text-secondary\", \"text-xs\", \"font-semibold\", \"text-center\");\n        // Add styles for blurred background\n        badge.style.backgroundColor = \"rgba(255, 255, 255, 0.7)\"; // Semi-transparent white background\n        badge.style.backdropFilter = \"blur(4px)\"; // Apply blur effect\n        badge.style.webkitBackdropFilter = \"blur(4px)\"; // For Safari compatibility\n        badge.style.padding = \"2px 8px\"; // Add some padding\n        badge.style.marginTop = \"4px\"; // Add some margin\n        badge.style.marginBottom = \"4px\"; // Add some margin\n        console.log(\"Chattometer badge created.\");\n        return true; // Badge created\n    } else {\n        // If bottomBox isn't found yet, return false\n        console.log(\"Bottom box not found, cannot create badge yet.\");\n        badge = null; // Ensure badge reference is null if creation fails\n        return false; // Badge could not be created\n    }\n}\n\n// FIXME: use different logic for different URL (different chat platforms)\nasync function findAndLogResponses() {\n    console.log(\"findAndLogResponses triggered.\"); // Log function start\n    // --- Try to find or create and insert the badge ---\n    if (!ensureBadgeExists()) {\n        console.log(\"Badge anchor not found in findAndLogResponses, exiting.\");\n        return;\n    }\n    // --- End badge finding/creation ---\n\n    // Ensure badge reference is up-to-date (might have been recreated)\n    badge = document.getElementById(BADGE_ID);\n    if (!badge) {\n        console.error(\"Badge element lost unexpectedly after creation check.\");\n        return;\n    }\n\n    let responses = document.querySelectorAll(\"div.agent-turn\"); // TODO: adjust per platform\n        // TODO: Add selectors for other platforms\n    const modelElement = document.querySelector('button[data-testid=\"model-switcher-dropdown-button\"] span'); // TODO\n    // TODO: Add selectors for other platforms\n    const modelName = modelElement ? modelElement.textContent.trim() : 'unknown'; // Get model name\n\n    // FIXME: use different tokenizer for different models\n    const enc = new Tiktoken(o200k_base);\n\n    let textArray = [];\n    let combinedText = '';\n    let lastResponse = null;\n    let nTokensCombinedText = 0;\n    let nTokensLastResponse = 0;\n\n    if (responses.length > 0) {\n        textArray = Array.from(responses).map(element => element.textContent || '');\n        combinedText = textArray.join('');\n        lastResponse = responses[responses.length - 1];\n        nTokensCombinedText = enc.encode(combinedText).length;\n        nTokensLastResponse = enc.encode(lastResponse.textContent || '').length;\n\n        // --- Log before sending ---\n        console.log(`Preparing to send to background: model='${modelName}', tokens=${nTokensCombinedText}, responses found=${responses.length}`);\n\n        // --- Send message to background script ---\n        const urlObj = new URL(window.location.href);\n        const chatKey = `${urlObj.origin}${urlObj.pathname}`;\n        chrome.storage.local.get(['processedTokens', 'lastImpactDataMap', 'lastRequestMap'], (result) => {\n            const tokensMapStored = result.processedTokens || {};\n            const impactMap = result.lastImpactDataMap || {};\n            const reqMap = result.lastRequestMap || {};\n            const lastData = impactMap[chatKey];\n            const lastReq = reqMap[chatKey];\n            // Seed processedTokens for this chatKey from lastRequest if missing\n            if (!(chatKey in tokensMapStored) && lastReq && (() => {\n                try {\n                    const prev = new URL(lastReq.url);\n                    return `${prev.origin}${prev.pathname}` === chatKey;\n                } catch { return false; }\n            })()) {\n                tokensMapStored[chatKey] = lastReq.tokens;\n                // Persist initial processedTokens map to storage\n                chrome.storage.local.set({ processedTokens: tokensMapStored });\n            }\n            const lastProcessedTokens = tokensMapStored[chatKey] || 0;\n            if (nTokensCombinedText <= lastProcessedTokens) {\n                console.log(\"No new tokens since last processed. Rendering cached impact data.\");\n                // Only render if the cached data corresponds to this chat\n                if (lastReq) {\n                    try {\n                        const prevUrl = new URL(lastReq.url);\n                        const prevKey = `${prevUrl.origin}${prevUrl.pathname}`;\n                        if (prevKey === chatKey && lastData) {\n                            updateBadge(lastData);\n                        } else if (badge) {\n                            badge.textContent = '';\n                        }\n                    } catch {\n                        if (badge) badge.textContent = '';\n                    }\n                } else if (badge) {\n                    badge.textContent = '';\n                }\n                return;\n            }\n            // New tokens: show calculating and send request\n            if (badge) badge.textContent = 'Calculating...';\n            const requestTimestamp = Date.now();\n            chrome.runtime.sendMessage(\n                {\n                    action: \"calculateImpact\",\n                    modelName: modelName,\n                    tokens: nTokensCombinedText,\n                    url: window.location.href,\n                    timestamp: requestTimestamp\n                },\n                (response) => {\n                    // --- Log response received ---\n                    console.log(\"Received response from background:\", JSON.stringify(response, null, 2));\n\n                    // Re-fetch the badge element inside the callback, as it might have changed\n                    const currentBadge = document.getElementById(BADGE_ID);\n                    if (!currentBadge) {\n                        console.log(\"Badge disappeared before update could happen.\");\n                        return; // Badge disappeared\n                    }\n\n                    // This callback runs when the background script sends a response\n                    if (chrome.runtime.lastError) {\n                        // Handle potential errors during message sending itself\n                        console.error(\"Error sending message:\", chrome.runtime.lastError.message);\n                        currentBadge.textContent = 'Error contacting background';\n                        return;\n                    }\n\n                    if (response && response.success) {\n                        const impactData = response.data;\n                        console.log('Estimated Impact (from background):', impactData);\n                        // Update badge with received data\n                        updateBadge(impactData); // Pass currentBadge reference if needed, or let updateBadge find it\n                    } else {\n                        // Handle errors reported by the background script\n                        const errorMsg = response ? response.error : 'Unknown error';\n                        console.error('Error fetching impact calculation (from background):', errorMsg);\n                        currentBadge.textContent = `Error: ${errorMsg}`; // Show specific error in badge\n                    }\n                }\n            );\n        });\n        // --- End message sending ---\n    } else if (badge) {\n        console.log(\"No responses found (responses.length === 0). Clearing badge.\");\n        if (!badge.textContent.startsWith('Error')) { // Don't clear error messages\n            badge.textContent = ''; // Clear badge if no responses found\n        }\n    }\n}\n\n// --- Function to update the badge ---\nfunction updateBadge(impactData) {\n    // --- Log data received by updateBadge ---\n    console.log(\"updateBadge received data:\", JSON.stringify(impactData, null, 2));\n\n    // Re-check if badge exists in the DOM, as it might have been removed/recreated\n    const currentBadge = document.getElementById(BADGE_ID);\n    if (!currentBadge) {\n        console.log(\"Badge not found when trying to update.\");\n        return; // Exit if badge doesn't exist anymore\n    }\n\n    if (impactData?.impacts?.energy_kWh?.min !== undefined && impactData?.impacts?.energy_kWh?.max !== undefined && impactData?.impacts?.gwp_kgCO2eq?.min !== undefined && impactData?.impacts?.gwp_kgCO2eq?.max !== undefined) {\n        const avgEnergy = 1000 * (impactData.impacts.energy_kWh.min + impactData.impacts.energy_kWh.max) / 2;\n        const avgGhg = 1000 * (impactData.impacts.gwp_kgCO2eq.min + impactData.impacts.gwp_kgCO2eq.max) / 2;\n        const badgeText = `Energy: ${avgEnergy.toFixed(1)} Wh<br>GHG: ${avgGhg.toFixed(1)} gCO2eq`;\n        console.log(\"Setting badge innerHTML:\", badgeText);\n        // Use innerHTML carefully, ensure data is sanitized if it came from external source\n        currentBadge.innerHTML = badgeText;\n    } else {\n        // Handle cases where data structure is unexpected or calculation failed previously\n        console.log(\"Impact data structure invalid or missing. Setting badge text to 'Impact data unavailable'.\");\n        if (!currentBadge.textContent.startsWith('Error')) { // Avoid overwriting specific error messages\n            currentBadge.textContent = 'Impact data unavailable';\n        }\n    }\n}\n\n// --- MutationObserver Setup ---\n\n// Define the callback function that runs when mutations are observed\nconst mutationCallback = function(mutationsList, obs) {\n    console.log(\"MutationObserver callback triggered.\"); // Log observer trigger\n    // Check if the badge anchor still exists before running calculations\n    const bottomBox = document.querySelector(\"div#thread-bottom-container\"); // Re-check anchor\n        if (bottomBox) {\n        // --- Add a small delay to allow DOM to settle ---\n        setTimeout(() => {\n            // Re-check anchor inside timeout in case it disappeared during the delay\n            const currentBottomBox = document.querySelector(\"div#thread-bottom-container\");\n                        if (!currentBottomBox) {\n                console.log(\"Anchor disappeared during mutation callback delay.\");\n                return;\n            }\n\n            console.log(\"Checking for responses after short delay...\");\n            const responsesExist = document.querySelector(\"div.agent-turn\");\n            if (responsesExist) {\n                console.log(\"Anchor and responses exist after delay, calling findAndLogResponses.\");\n                findAndLogResponses(); // Run the main logic only if responses are also present\n            } else {\n                console.log(\"Anchor exists, but no responses found after delay. Waiting for next mutation.\");\n                // Optionally, clear the badge if no responses are found after the delay\n                const currentBadge = document.getElementById(BADGE_ID);\n                if (currentBadge && !currentBadge.textContent.startsWith('Error') && !currentBadge.textContent.startsWith('Calculating')) {\n                    currentBadge.textContent = '';\n                }\n            }\n        }, 300); // Increased delay to 300 milliseconds\n\n    } else {\n        // If the anchor disappeared (e.g., navigating away), disconnect observer\n        console.log(\"Badge anchor lost, disconnecting observer.\");\n        if (observer) observer.disconnect(); // Ensure observer is disconnected\n        badge = null; // Clear badge reference\n    }\n};\n\n// Function to find target elements and attach the observer\nfunction setupObservers() {\n    // Disconnect any previous observers to avoid duplicates\n    if (observer) {\n        observer.disconnect();\n        console.log(\"Disconnected previous observer.\");\n    } else {\n        // Create the observer instance if it doesn't exist\n        observer = new MutationObserver(mutationCallback);\n    }\n\n    console.log(\"Attempting to set up specific observers...\");\n\n    let observedSomething = false;\n\n    // Target 1: Response container \n    // TODO: Add selectors for other platforms\n    const specificResponseContainer = document.querySelector(\"#thread > div:nth-child(1) > div:nth-child(2)\");\n\n    if (specificResponseContainer) {\n        console.log(\"Observing specific response container:\", specificResponseContainer);\n        observer.observe(specificResponseContainer, { childList: true, subtree: true });\n        observedSomething = true;\n    } else {\n        console.warn(\"Specific response container (#thread > div:nth-child(1) > div:nth-child(2)) not found. Observation might be less targeted.\");\n        // Fallback: Observe a broader container if specific one isn't found, or rely on body observation later\n        const genericResponseContainer = document.querySelector('div[class*=\"react-scroll-to-bottom\"] > div'); \n        if (genericResponseContainer && genericResponseContainer !== document.body) {\n            console.log(\"Observing generic response container:\", genericResponseContainer);\n            observer.observe(genericResponseContainer, { childList: true, subtree: true });\n            observedSomething = true;\n        }\n    }\n\n    // Target 2: Model switcher button (Example selector)\n    // TODO: Add selectors for other platforms\n    const modelSwitcherButton = document.querySelector('button[data-testid=\"model-switcher-dropdown-button\"]');\n    if (modelSwitcherButton) {\n        console.log(\"Observing model switcher button:\", modelSwitcherButton);\n        // Observe changes to the button's text content (subtree and characterData)\n        observer.observe(modelSwitcherButton, { childList: true, subtree: true, characterData: true });\n        // Note: Observing the button itself might not be necessary if observing the response container catches model changes indirectly.\n        // Keep it if model changes *without* new responses need immediate recalculation.\n        observedSomething = true; // Count this even if container was also observed\n    } else {\n        console.warn(\"Model switcher button not found.\");\n    }\n\n    // If no specific targets were found, observe the body as a last resort.\n    // This is less efficient but provides broader coverage.\n    if (!observedSomething) {\n        console.warn(\"Could not find specific elements. Falling back to observing document body.\");\n        // Ensure we don't observe the body if we already observed something more specific\n        observer.observe(document.body, { childList: true, subtree: true });\n    } else {\n        console.log(\"Specific observers attached.\");\n    }\n}\n\n// --- Initialization Logic ---\n\nfunction initializeChattometer() {\n    console.log(\"Initializing Chattometer...\");\n    // 1. Ensure the badge exists or can be created\n    if (ensureBadgeExists()) {\n        // Immediately render cached impact data if available\n        const urlObjInit = new URL(window.location.href);\n        const initChatKey = `${urlObjInit.origin}${urlObjInit.pathname}`;\n        chrome.storage.local.get(['lastImpactDataMap', 'lastRequestMap'], (initResult) => {\n            const impactMapInit = initResult.lastImpactDataMap || {};\n            const reqMapInit = initResult.lastRequestMap || {};\n            const lastDataInit = impactMapInit[initChatKey];\n            const lastReqInit = reqMapInit[initChatKey];\n            if (lastDataInit && lastReqInit) {\n                try {\n                    const prevInit = new URL(lastReqInit.url);\n                    if (`${prevInit.origin}${prevInit.pathname}` === initChatKey) {\n                        updateBadge(lastDataInit);\n                    }\n                } catch {}\n            }\n            // Proceed with normal logic\n            findAndLogResponses();\n            setupObservers();\n        });\n    } else {\n        // If badge couldn't be created (anchor not found), schedule another attempt\n        console.log(\"Badge anchor not found. Retrying initialization soon...\");\n        scheduleInitialization(1000); // Try again in 1 second\n    }\n}\n\n// Debounced initialization function\nfunction scheduleInitialization(delay = 500) {\n    clearTimeout(initializationTimer); // Clear any existing timer\n    initializationTimer = setTimeout(initializeChattometer, delay);\n}\n\n// --- Event Listeners for Navigation ---\n\n// Listen for standard navigation events\nwindow.addEventListener('popstate', () => {\n    console.log(\"popstate event triggered.\");\n    scheduleInitialization();\n});\nwindow.addEventListener('hashchange', () => {\n    console.log(\"hashchange event triggered.\");\n    scheduleInitialization();\n});\n\n// Wrap history API methods to detect SPA navigation\nconst originalPushState = history.pushState;\nhistory.pushState = function() {\n    const result = originalPushState.apply(this, arguments);\n    window.dispatchEvent(new Event('pushstate')); // Dispatch custom event\n    window.dispatchEvent(new Event('locationchange')); // Generic event\n    return result;\n};\n\nconst originalReplaceState = history.replaceState;\nhistory.replaceState = function() {\n    const result = originalReplaceState.apply(this, arguments);\n    window.dispatchEvent(new Event('replacestate')); // Dispatch custom event\n    window.dispatchEvent(new Event('locationchange')); // Generic event\n    return result;\n};\n\n// Listen for our custom navigation events\nwindow.addEventListener('pushstate', () => {\n    console.log(\"pushstate intercepted.\");\n    scheduleInitialization();\n});\nwindow.addEventListener('replacestate', () => {\n    console.log(\"replacestate intercepted.\");\n    scheduleInitialization();\n});\n\n// Listen for generic SPA navigation event\nwindow.addEventListener('locationchange', () => {\n    console.log(\"locationchange intercepted.\");\n    scheduleInitialization();\n});\n\n// --- Initial Load ---\n\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => scheduleInitialization(1000)); // Add slight delay even on DOMContentLoaded\n} else {\n    // If DOMContentLoaded has already fired\n    scheduleInitialization(1500);\n}\n\nconsole.log(\"Chattometer content script loaded.\");\n\n// Listen for reinitialization requests from background script\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.action === 'reinitializeChattometer') {\n    console.log('Received reinit message. Reinitializing Chattometer...');\n    scheduleInitialization();\n  }\n});\n\n// Export functions for unit testing\nexport { ensureBadgeExists, updateBadge };\n"],"mappings":"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","ignoreList":[]}