{"version":3,"file":"background.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://chattometer/./src/scripts/background.js"],"sourcesContent":["\n// Listen for messages from the content script\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.action === \"calculateImpact\") {\n    // Perform the fetch request\n    // FIXME: the current endpoint is a local Flask server running on port 5000, use actual endpoint in production\n    fetch('http://127.0.0.1:5000/calculate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        // FIXME: use different model names based on request.modelName if needed\n        model: \"gpt-4o\", // Or use request.modelName if backend supports it\n        tokens: request.tokens\n      }),\n    })\n    .then(response => {\n      if (!response.ok) {\n        // If response is not ok, create an error object to send back\n        return response.text().then(text => {\n          throw new Error(`HTTP error! status: ${response.status}, message: ${text}`);\n        });\n      }\n      return response.json(); // Parse JSON if response is ok\n    })\n    .then(data => {\n      // Send the successful data back to the content script\n      sendResponse({ success: true, data: data });\n    })\n    .catch(error => {\n      console.error('Error fetching impact calculation in background:', error);\n      // Send an error object back to the content script\n      sendResponse({ success: false, error: error.message });\n    });\n\n    // Return true to indicate that the response will be sent asynchronously\n    return true;\n  }\n});\n\nconsole.log(\"Chattometer background script loaded.\");\n"],"names":[],"sourceRoot":""}