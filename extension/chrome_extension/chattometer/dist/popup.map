{"version":3,"file":"popup.js","mappingssources":["webpack://chattometer/./src/popup/popup.js"],"sourcesContent":["// Helper to clear popup fields when chat has no data\nfunction clearPopup() {\n  document.getElementById('equiv-bulb-minutes').textContent = '--';\n  document.getElementById('equiv-laptop-hours').textContent = '--';\n}\n\n// Log when popup script is loaded\nconsole.log('popup.js loaded');\n\n// Initialization function for popup data\nfunction initPopup() {\n  console.log('popup.js: initPopup called');\n\n  // ← always update cumulative display, even if we're not on a chat page\n  chrome.storage.local.get(['cumulativeRequests'], (res) => {\n    const cum = res.cumulativeRequests || {};\n    updateCumulative(cum);\n  });\n\n  try {\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      const tab = tabs[0];\n      if (!tab || !tab.url) {\n        clearPopup();\n        return;\n      }\n      const urlObj = new URL(tab.url);\n      const chatKey = `${urlObj.origin}${urlObj.pathname}`;\n\n      // only fetch & render chat‐specific data here\n      chrome.storage.local.get(['lastImpactDataMap', 'lastRequestMap'], (result) => {\n        const impactMap = result.lastImpactDataMap || {};\n        const reqMap    = result.lastRequestMap    || {};\n        const data = impactMap[chatKey];\n        const req  = reqMap[chatKey];\n\n        if (data && req) {\n          renderPopup(data, req);\n        } else {\n          clearPopup();\n        }\n      });\n    });\n  } catch (e) {\n    console.error('Error querying tabs in initPopup:', e);\n    clearPopup();\n  }\n}\n\n// Invoke initPopup based on document ready state\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initPopup);\n} else {\n  initPopup();\n}\n\n// Update in real time if storage changes while popup is open\nchrome.storage.onChanged.addListener((changes, area) => {\n  if (area === 'local') {\n    // If cumulativeRequests changed, update cumulative immediately\n    if (changes.cumulativeRequests) {\n      const cum = changes.cumulativeRequests.newValue || {};\n      updateCumulative(cum);\n    }\n    if (changes.lastImpactDataMap || changes.lastRequestMap) {\n      chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n        const tab = tabs[0];\n        if (!tab || !tab.url) {\n          return;\n        }\n        const urlObj = new URL(tab.url);\n        const chatKey = `${urlObj.origin}${urlObj.pathname}`;\n        chrome.storage.local.get(['lastImpactDataMap', 'lastRequestMap', 'cumulativeRequests'], (result) => {\n          const impactMap = result.lastImpactDataMap || {};\n          const reqMap = result.lastRequestMap || {};\n          const cum = result.cumulativeRequests || {};\n          const data = impactMap[chatKey];\n          const req = reqMap[chatKey];\n          if (data && req) {\n            renderPopup(data, req);\n          } else {\n            clearPopup();\n          }\n          updateCumulative(cum);\n        });\n      });\n    }\n  }\n});\n\n// Function to update cumulative impacts display\nfunction updateCumulative(cumMap) {\n  console.log('popup.js: updateCumulative called with', cumMap);\n  let totalEnergy = 0;\n  let totalGhg = 0;\n  let totalTokens = 0;\n  let sinceTimestamp = Infinity;\n  Object.values(cumMap).forEach(val => {\n    totalEnergy += val.energyWh;\n    totalGhg += val.ghgG;\n    if (val.tokens) totalTokens += val.tokens;\n    if (val.timestamp && Date.parse(val.timestamp) < sinceTimestamp) sinceTimestamp = Date.parse(val.timestamp);\n  });\n  const sinceDateStr = isFinite(sinceTimestamp)\n    ? new Date(sinceTimestamp).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })\n    : 'N/A';\n  const cumDateEl = document.getElementById('popup-cum-date');\n  if (cumDateEl) cumDateEl.textContent = `Cumulative impacts since ${sinceDateStr}`;\n  const cumTokensEl = document.getElementById('popup-cum-tokens');\n  if (cumTokensEl) cumTokensEl.textContent = totalTokens.toString();\n  const cumEnergyEl = document.getElementById('popup-cum-energy');\n  const cumGhgEl = document.getElementById('popup-cum-ghg');\n  if (cumEnergyEl) cumEnergyEl.textContent = totalEnergy.toFixed(1) + ' Wh';\n  if (cumGhgEl) cumGhgEl.textContent = totalGhg.toFixed(1) + ' gCO2eq';\n  // Update cumulative equivalents: bulb minutes and laptop hours based on total energy in Wh\n  const eqBulbEl = document.getElementById('equiv-bulb-minutes');\n  const eqLaptopEl = document.getElementById('equiv-laptop-hours');\n  if (eqBulbEl) {\n    const bulbMin = totalEnergy * 6; // 1 Wh corresponds to 6 minutes at 10W\n    eqBulbEl.textContent = bulbMin.toFixed(0);\n  }\n  if (eqLaptopEl) {\n    const lapHours = totalEnergy / 35; // average laptop uses 35 Wh per hour\n    eqLaptopEl.textContent = lapHours.toFixed(1);\n  }\n}"],"names":[],"sourceRoot":""}